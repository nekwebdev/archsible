---
- name: "Install arch linux"
  hosts: localhost
  connection: local

  vars_prompt:
    - name: root_password
      prompt: What is the root password?
      private: yes
      confirm: yes
      encrypt: sha512_crypt
      salt_size: 7
    - name: user_password
      prompt: "What is the {{ username }}'s password?"
      private: yes
      confirm: yes
      encrypt: sha512_crypt
      salt_size: 7

  vars_files:
    - "{{ playbook_dir }}/config.yml"

  tasks:
    - name: Abort if the host is not booted from the Arch install media
      fail:
        msg: "This host is not booted from the Arch install media!"
      when: ansible_nodename != 'archiso'

    - name: Synchronize clock via NTP
      command: timedatectl set-ntp true

    - name: Generate a mirrorlist, will take 5 minutes
      command: reflector -s 'United States' -a 6 --sort rate --save /etc/pacman.d/mirrorlist

    - name: Update pacman cache
      community.general.pacman:
        update_cache: yes
        force: yes

    - name: Install python-pexpect
      community.general.pacman:
        name: python-pexpect
        state: present

    - block:
        - name: This would wipe the main drive and create partitions
          fail:
            msg: This block would do an auto paritioning. Not implemented yet.
      when: auto_partition | bool

    - block:
        - name: Create FAT32 filesystem in boot partition
          community.general.filesystem:
            dev: "{{ boot }}"
            fstype: vfat
            opts: -F32
            force: no
          when: (format_boot | bool) or (auto_partition | bool)

        - name: Create swap filesystem in swap partition
          community.general.filesystem:
            dev: "{{ swap }}"
            fstype: swap
            force: yes

        - name: Create btrfs filesystem in root partition
          community.general.filesystem:
            dev: "{{ root }}"
            fstype: btrfs
            force: yes

    - block:
        - name: Mount swap
          command: "swapon /dev/{{ swap }}"

        - name: Mount root partition to /mnt
          ansible.posix.mount:
            path: /mnt
            src: "/dev/{{ root }}"
            fstype: btrfs
            state: present

        - name: Create root btrfs subvolume
          command: "btrfs su cr /mnt/{{ item }}"
          with_items:
            - "@"
            - "@home"
            - "@snapshots"
            - "@var_log"

        - name: Unmount /mnt
          ansible.posix.mount:
            path: /mnt
            state: unmounted

        - name: Mount root subvolume to /mnt
          ansible.posix.mount:
            path: /mnt
            src: "/dev/{{ root }}"
            fstype: btrfs
            opts: noatime,compress=izo,space_cache=v2,subvol=@
            state: present

        - name: Create the needed directories
          file:
            path: "/mnt/{{ item }}"
            state: directory
            recurse: yes
          with_items:
            - "boot"
            - "home"
            - ".snapshots"
            - "var/log"

        - name: Mount remaining subvolumes
          ansible.posix.mount:
            path: "/mnt/{{ item.path }}"
            src: "/dev/{{ root }}"
            fstype: btrfs
            opts: "noatime,compress=lzo,space_cache=v2,subvol={{ item.subvol }}"
            state: present
          with_items:
            - { subvol: "@home", path: "home" }
            - { subvol: "@snapshots", path: ".snapshots" }
            - { subvol: "@var_log", path: "var/log" }

        - name: Mount boot partition
          ansible.posix.mount:
            path: "/mnt/boot"
            src: "/dev/{{ boot }}"
            fstype: vfat
            state: present

    - name: Bootstrap Arch Linux
      command: "pacstrap /mnt base linux linux-firmware vim intel-ucode"

    - name: Print fstab info
      command: genfstab -U /mnt
      register: fstab_input

    - name: Save fstab
      blockinfile:
        path: /mnt/etc/fstab
        block: "{{ fstab_input.stdout }}"
        state: present
        create: yes

    # config out of chroot
    - name: Enable locale in the gen file
      lineinfile:
        path: /mnt/etc/locale.gen
        regexp: "^{{ locale }}.{{ locale_encoding }} {{ locale_encoding }}"
        line: "{{ locale }}.{{ locale_encoding }} {{ locale_encoding }}"
        state: present
        create: yes

    - name: Save locale in the locale.conf
      lineinfile:
        path: /mnt/etc/locale.conf
        regexp: "^LANG={{ locale }}.{{ locale_encoding }}"
        line: "LANG={{ locale }}.{{ locale_encoding }}"
        state: present
        create: yes

    - name: Save keyboard layout the vconsole.conf
      lineinfile:
        path: /mnt/etc/vconsole.conf
        regexp: "^KEYMAP={{ keymap }}"
        line: "KEYMAP={{ keymap }}"
        state: present
        create: yes

    - name: Set hostname
      lineinfile:
        path: /mnt/etc/hostname
        regexp: "^{{ hostname }}"
        line: "{{ hostname }}"
        state: present
        create: yes

    - name: Set hosts
      blockinfile:
        path: /mnt/etc/hosts
        block: |
          127.0.0.1 localhost
          ::1 localhost
          127.0.1.1 {{ hostname }}.localdomain {{ hostname }}
        state: present
        create: yes

    # arch-chroot
    - name: Set local timezone
      command: "arch-chroot /mnt ln -sf /usr/share/zoneinfo/{{ timezone }} /etc/localtime"

    - name: Synchronize hardware clock
      command: "arch-chroot /mnt hwclock --systohc"

    - name: Generate locale
      command: "arch-chroot /mnt locale-gen"

    - name: "Change root password"
      expect:
        command: "arch-chroot /mnt passwd"
        responses:
          (.*)password(.*): "{{ root_password }}"
          (.*)password(.*): "{{ root_password }}"

    - name: "Install packaged in chroot"
      command: "arch-chroot /mnt pacman -S grub efibootmgr networkmanager network-manager-applet dialog wpa_supplicant mtools dosfstools git reflector snapper bluez bluez-utils cups hplip xdg-utils xdg-user-dirs alsa-utils pulseaudio pusleaudio-bluetooth inetutils base-devel linux-headers acpi tlp os-prober ntfs-3g bash-completion"

    # config out of chroot
    - name: Add btrfs to mkinitcpio modules
      lineinfile:
        path: /mnt/etc/mkinitcpio.conf
        regexp: "^MODULES=(^"
        line: "MODULES=(btrfs)"
        state: present
        create: yes

    # arch-chroot
    - name: Regenerate the image
      command: "arch-chroot /mnt mkinitcpio -p linux"

    - block: 
        - name: Create windows partition mount point
          file:
            path: "/mnt/mnt/windows"
            state: directory
        
        - name: Mount the windows partition
          command: "arch-chroot /mnt mount /dev/{{ windows }} /mnt/windows"

      when: dual_boot | bool

    - name: Install grub in /boot
      command: "arch-chroot /mnt grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB"

    - name: Create grub.cfg file
      command: "arch-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg"

    - block: 
        - name: UnmountMount the windows partition
          command: "arch-chroot /mnt umount /dev/{{ windows }}"

        - name: Delete windows partition mount point
          file:
            path: "/mnt/mnt/windows"
            state: absent

      when: dual_boot | bool

    - name: Enable services
      command: "arch-chroot /mnt systemctl enable {{ item }}"
      with_items:
       - NetworkManager
       - bluetooth
       - cups
       - tlp.service


    